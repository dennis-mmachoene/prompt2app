import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};
export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate TODO app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "Beautiful & Functional To-Do App",\n  "explanation": "This project is a beautiful and functional to-do application built using React, Tailwind CSS for styling, and lucide-react for icons. The application allows users to manage their tasks efficiently with features like adding, editing, deleting, and marking tasks as complete. The components are organized into separate folders for better maintainability, and the UI is designed to be intuitive and aesthetically pleasing, providing a great user experience. Emoji icons are also integrated to enhance the user interface with visual cues, and utilizes date-fns for date display and formatting.",\n  "files": {\n    "/App.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport TaskList from \'./components/TaskList/TaskList\';\\nimport TaskForm from \'./components/TaskForm/TaskForm\';\\nimport Header from \'./components/Header/Header\';\\nimport Footer from \'./components/Footer/Footer\';\\nimport { format } from \'date-fns\';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem(\'tasks\');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem(\'tasks\', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (text) => {\\n    setTasks([...tasks, { id: Date.now(), text, completed: false, createdAt: new Date() }]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  const editTask = (id, newText) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, text: newText } : task));\\n  };\\n\\n  return (\\n    <div className=\\"bg-gradient-to-br from-blue-100 to-green-100 min-h-screen flex flex-col\\">\\n      <Header />\\n      <main className=\\"container mx-auto p-4 flex-grow\\">\\n        <TaskForm addTask={addTask} />\\n        <TaskList\\n          tasks={tasks}\\n          toggleComplete={toggleComplete}\\n          deleteTask={deleteTask}\\n          editTask={editTask}\\n        />\\n      </main>\\n      <Footer />\\n    </div>\\n  );\\n}\\n\\nexport default App;"\n    },\n    "/components/TaskList/TaskList.js": {\n      "code": "import React from \'react\';\\nimport TaskItem from \'../TaskItem/TaskItem\';\\n\\nfunction TaskList({ tasks, toggleComplete, deleteTask, editTask }) {\\n  return (\\n    <ul className=\\"space-y-2 mt-4\\">\\n      {tasks.length === 0 ? (\\n        <p className=\\"text-gray-500 italic\\">No tasks yet. Add some!</p>\\n      ) : (\\n        tasks.map(task => (\\n          <TaskItem\\n            key={task.id}\\n            task={task}\\n            toggleComplete={toggleComplete}\\n            deleteTask={deleteTask}\\n            editTask={editTask}\\n          />\\n        ))\\n      )}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;"\n    },\n    "/components/TaskItem/TaskItem.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\nimport { formatDistanceToNow } from \'date-fns\';\\n\\nfunction TaskItem({ task, toggleComplete, deleteTask, editTask }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(task.text);\\n\\n  const handleEdit = () => {\\n    editTask(task.id, editText);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <li className=\\"flex items-center justify-between p-3 rounded-md shadow-sm bg-white\\">\\n      {isEditing ? (\\n        <input\\n          type=\\"text\\"\\n          value={editText}\\n          onChange={(e) => setEditText(e.target.value)}\\n          onBlur={handleEdit}\\n          onKeyDown={(e) => {\\n            if (e.key === \'Enter\') {\\n              handleEdit();\\n            }\\n          }}\\n          className=\\"flex-grow p-2 border rounded focus:outline-none focus:ring focus:border-blue-300\\"\\n        />\\n      ) : (\\n        <div className=\\"flex items-center flex-grow\\">\\n          <input\\n            type=\\"checkbox\\"\\n            checked={task.completed}\\n            onChange={() => toggleComplete(task.id)}\\n            className=\\"mr-2 h-5 w-5 text-blue-500 focus:ring-blue-300 border-gray-300 rounded\\"\\n          />\\n          <span className={`${task.completed ? \'line-through text-gray-500\' : \'text-gray-700\'} flex-grow`}>\\n            {task.text}\\n          </span>\\n          <span className=\\"text-xs text-gray-400 italic ml-2\\">\\n            {formatDistanceToNow(task.createdAt, { addSuffix: true })}\\n          </span>\\n        </div>\\n      )}\\n\\n      <div className=\\"space-x-2\\">\\n        {isEditing ? (\\n          <button onClick={handleEdit} className=\\"p-2 bg-green-500 hover:bg-green-700 text-white rounded-md\\">\\n            <Check size={16} />\\n          </button>\\n        ) : (\\n          <button onClick={() => setIsEditing(true)} className=\\"p-2 bg-blue-500 hover:bg-blue-700 text-white rounded-md\\">\\n            <Edit size={16} />\\n          </button>\\n        )}\\n        <button onClick={() => deleteTask(task.id)} className=\\"p-2 bg-red-500 hover:bg-red-700 text-white rounded-md\\">\\n          <Trash size={16} />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TaskItem;"\n    },\n    "/components/TaskForm/TaskForm.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\n\\nfunction TaskForm({ addTask }) {\\n  const [text, setText] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      addTask(text);\\n      setText(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"flex items-center\\">\\n      <input\\n        type=\\"text\\"\\n        placeholder=\\"Add a new task... ðŸš€\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n        className=\\"flex-grow p-3 border rounded focus:outline-none focus:ring focus:border-blue-300\\"\\n      />\\n      <button type=\\"submit\\" className=\\"ml-2 p-3 bg-blue-500 hover:bg-blue-700 text-white rounded-md\\">\\n        <Plus size={20} />\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;"\n    },\n    "/components/Header/Header.js": {\n      "code": "import React from \'react\';\\nimport { Check } from \'lucide-react\';\\n\\nfunction Header() {\\n  return (\\n    <header className=\\"bg-blue-600 text-white p-6 shadow-md\\">\\n      <div className=\\"container mx-auto flex items-center justify-between\\">\\n        <h1 className=\\"text-2xl font-semibold flex items-center\\">\\n          <Check className=\\"mr-2\\" size={30} /> To-Do List\\n        </h1>\\n        {/* You could add user authentication or other header elements here */}\\n      </div>\\n    </header>\\n  );\\n}\\n\\nexport default Header;"\n    },\n    "/components/Footer/Footer.js": {\n      "code": "import React from \'react\';\\n\\nfunction Footer() {\\n  const currentYear = new Date().getFullYear();\\n\\n  return (\\n    <footer className=\\"bg-gray-800 text-white p-4 text-center\\">\\n      <p>&copy; {currentYear} Beautiful To-Do App. All rights reserved.</p>\\n    </footer>\\n  );\\n}\\n\\nexport default Footer;"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TaskList/TaskList.js",\n    "/components/TaskItem/TaskItem.js",\n    "/components/TaskForm/TaskForm.js",\n    "/components/Header/Header.js",\n    "/components/Footer/Footer.js"\n  ]\n}\n```',
        },
      ],
    },
  ], 
});
// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
